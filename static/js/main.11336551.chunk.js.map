{"version":3,"sources":["api.ts","store/actions.tsx","store/index.ts","components/CurrentUser/CurrentUser.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["API_URL","getTodos","a","fetch","response","json","getUserFromServer","userId","LOAD_USER","SELECT_USER","LOAD_TODOS","DELETE_TODO","LOAD_ERROR","actions","user","type","todos","message","selectors","state","errorLoading","initialState","store","createStore","action","filter","todo","id","composeWithDevTools","CurrentUser","currentUser","useSelector","dispatch","useDispatch","selectedUserId","error","useEffect","serverUser","deleteUser","useCallback","className","name","email","phone","onClick","TodoList","useState","query","setQuery","selectedTodos","setSelectedTodos","filteredVisibleTodos","completed","getVisibleTodos","title","toLowerCase","includes","handleDeleteTodo","deleteTodo","selectUser","value","onChange","event","target","map","readOnly","App","getAllPosts","gotTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11336551.chunk.js","sourcesContent":["import { User, Todo } from './react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserFromServer = async (userId: number): Promise<User> => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import { User, Todo } from '../react-app-env';\n\nexport const LOAD_USER = 'LOAD_USER';\nexport const SELECT_USER = 'SELECT_USER';\nexport const CLEAR_USER = 'CLEAR_USER';\nexport const LOAD_TODOS = 'LOAD_TODOS';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const LOAD_ERROR = 'LOAD_ERROR';\n\nexport const actions = {\n  loadUserAction: (user: User) => ({\n    type: LOAD_USER,\n    user,\n  }),\n  selectUserAction: (userId: number) => ({\n    type: SELECT_USER,\n    userId,\n  }),\n  loadTodosAction: (todos: Todo[]) => ({\n    type: LOAD_TODOS,\n    todos,\n  }),\n  loadErrorAction: (message: string) => ({\n    type: LOAD_ERROR,\n    message,\n  }),\n};\n\nexport const deleteTodo = (id: number) => ({\n  type: DELETE_TODO,\n  id,\n});\n","import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { User, Todo } from '../react-app-env';\n\nimport {\n  LOAD_TODOS,\n  LOAD_USER,\n  LOAD_ERROR,\n  DELETE_TODO,\n  SELECT_USER,\n} from './actions';\n\nexport const selectors = {\n  loadUserSelector: (state: RootState) => state.user,\n  getUsersIdSelector: (state: RootState) => state.userId,\n  loadTodosSelector: (state: RootState) => state.todos,\n  loadErrorSelector: (state: RootState) => state.errorLoading,\n};\n\nexport type RootState = {\n  user: User | null,\n  userId: number,\n  todos: Todo[],\n  errorLoading: string,\n};\n\nconst initialState: RootState = {\n  user: null,\n  userId: 0,\n  todos: [],\n  errorLoading: '',\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n    case SELECT_USER:\n      return {\n        ...state,\n        userId: action.userId,\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n    case LOAD_ERROR:\n      return {\n        ...state,\n        errorLoading: action.message,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserFromServer } from '../../api';\nimport './CurrentUser.scss';\n\nimport { actions } from '../../store/actions';\nimport { selectors } from '../../store/index';\n\nexport const CurrentUser: React.FC = () => {\n  const currentUser = useSelector(selectors.loadUserSelector);\n  const dispatch = useDispatch();\n  const selectedUserId = useSelector(selectors.getUsersIdSelector);\n  const error = useSelector(selectors.loadErrorSelector);\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const serverUser = await getUserFromServer(selectedUserId);\n\n        dispatch(actions.loadUserAction(serverUser));\n      } catch {\n        dispatch(actions.loadErrorAction('Can not load user'));\n      }\n    }\n\n    response();\n  }, [selectedUserId]);\n\n  const deleteUser = useCallback((userId: number) => {\n    dispatch(actions.selectUserAction(userId));\n  }, []);\n\n  return (\n    <>\n      {currentUser ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${currentUser.id}`}\n            </span>\n          </h2>\n          <h3\n            className=\"CurrentUser__name\"\n            data-cy=\"userName\"\n          >\n            {currentUser.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {currentUser.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {currentUser.phone}\n          </p>\n          <button\n            type=\"button\"\n            className=\"CurrentUser__button\"\n            onClick={() => deleteUser(0)}\n          >\n            Clear\n          </button>\n        </div>\n      )\n        : (\n          <p>\n            {error}\n          </p>\n        )}\n    </>\n  );\n};\n","import React, { ChangeEvent, useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectors } from '../../store/index';\nimport { actions, deleteTodo } from '../../store/actions';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [selectedTodos, setSelectedTodos] = useState('');\n\n  const todos = useSelector(selectors.loadTodosSelector);\n\n  const dispatch = useDispatch();\n\n  const getVisibleTodos = () => {\n    switch (selectedTodos) {\n      case 'Active':\n        return todos.filter(todo => !todo.completed);\n      case 'Completed':\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  };\n\n  const visibleTodos = getVisibleTodos();\n\n  const filteredVisibleTodos = visibleTodos.filter(todo => (\n    todo.title.toLowerCase().includes(query.toLowerCase())\n  ));\n\n  const onChangeInput = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const onChangeSelected = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedTodos(event.target.value);\n  };\n\n  const handleDeleteTodo = useCallback((id: number) => {\n    dispatch(deleteTodo(id));\n  }, []);\n\n  const selectUser = useCallback((userId: number) => {\n    dispatch(actions.selectUserAction(userId));\n  }, []);\n\n  return (\n    <div className=\"TodoList\">\n      <h1>Redux list of todos</h1>\n      <label>\n        <input\n          className=\"TodoList__select\"\n          type=\"text\"\n          value={query}\n          data-cy=\"filterByTitle\"\n          onChange={onChangeInput}\n        />\n      </label>\n      <select\n        className=\"TodoList__select\"\n        value={selectedTodos}\n        onChange={onChangeSelected}\n      >\n        <option value=\"All\">All</option>\n        <option value=\"Active\">Active</option>\n        <option value=\"Completed\">Completed</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {\n            filteredVisibleTodos.map(todo => (\n              <li\n                className={`\n                    TodoList__item\n                    ${todo.completed\n                ? 'TodoList__item--checked'\n                : 'TodoList__item--unchecked'\n              }`}\n                key={todo.id}\n              >\n                <label className=\"TodoList__input\">\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                {todo.userId && (\n                  <div>\n                    <button\n                      type=\"button\"\n                      data-cy=\"userButton\"\n                      className={`TodoList__user-button button\n                       ${todo.completed\n                          && 'TodoList__user-button--selected'}\n                        `}\n                      onClick={() => selectUser(todo.userId)}\n                    >\n                      {`User ${todo.userId}`}\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      onClick={() => handleDeleteTodo(todo.id)}\n                      className=\"TodoList__deleteButton button\"\n                    >\n                      DELETE\n                    </button>\n                  </div>\n                )}\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useCallback } from 'react';\nimport { getTodos } from './api';\nimport { actions } from './store/actions';\nimport { selectors } from './store/index';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\nimport './styles/general.scss';\n\nimport './App.scss';\n\nconst App = () => {\n  const selectedUserId = useSelector(selectors.getUsersIdSelector);\n\n  const dispatch = useDispatch();\n\n  const getAllPosts = useCallback(\n    async () => {\n      const gotTodos = await getTodos();\n\n      dispatch(actions.loadTodosAction(gotTodos));\n    }, [],\n  );\n\n  useEffect(() => {\n    getAllPosts();\n  }, []);\n\n  return (\n    <>\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList />\n        </div>\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}